var should=require("should"),changeNode=require("../../../../nodes/core/logic/15-change.js"),helper=require("../../helper.js"),Log=require("../../../../red/log.js");
describe("change Node",function(){beforeEach(function(a){helper.startServer(a)});afterEach(function(a){helper.unload();helper.stopServer(a)});it("should load node with defaults",function(a){helper.load(changeNode,[{id:"c1",type:"change",name:"change1"}],function(){helper.getNode("c1").should.have.property("name","change1");helper.getNode("c1").should.have.property("rules",[{t:void 0,p:""}]);a()})});it("should load defaults if set to replace",function(a){helper.load(changeNode,[{id:"c1",type:"change",
name:"change1",action:"replace"}],function(){helper.getNode("c1").should.have.property("name","change1");helper.getNode("c1").should.have.property("rules",[{p:"",t:"set",to:""}]);a()})});it("should load defaults if set to change",function(a){helper.load(changeNode,[{id:"c1",type:"change",name:"change1",action:"change"}],function(){helper.getNode("c1").should.have.property("name","change1");helper.getNode("c1").should.have.property("rules",[{from:/(?:)/g,p:"",re:void 0,t:"change",to:""}]);a()})});
describe("#replace",function(){it("sets the value of the message property",function(a){helper.load(changeNode,[{id:"changeNode1",type:"change",action:"replace",property:"payload",from:"",to:"changed",reg:!1,name:"changeNode",wires:[["helperNode1"]]},{id:"helperNode1",type:"helper",wires:[]}],function(){var b=helper.getNode("changeNode1");helper.getNode("helperNode1").on("input",function(c){try{c.payload.should.equal("changed"),a()}catch(d){a(d)}});b.receive({payload:"changeMe"})})});it("sets the value of an already set multi-level message property",
function(a){helper.load(changeNode,[{id:"changeNode1",type:"change",action:"replace",property:"foo.bar",from:"",to:"bar",reg:!1,name:"changeNode",wires:[["helperNode1"]]},{id:"helperNode1",type:"helper",wires:[]}],function(){var b=helper.getNode("changeNode1");helper.getNode("helperNode1").on("input",function(c){try{c.foo.bar.should.equal("bar"),a()}catch(d){a(d)}});b.receive({foo:{bar:"foo"}})})});it("sets the value of an empty multi-level message property",function(a){helper.load(changeNode,[{id:"changeNode1",
type:"change",action:"replace",property:"foo.bar",from:"",to:"bar",reg:!1,name:"changeNode",wires:[["helperNode1"]]},{id:"helperNode1",type:"helper",wires:[]}],function(){var b=helper.getNode("changeNode1");helper.getNode("helperNode1").on("input",function(c){try{c.foo.bar.should.equal("bar"),a()}catch(d){a(d)}});b.receive({})})});it("sets the value of a message property to another message property",function(a){helper.load(changeNode,[{id:"changeNode1",type:"change",action:"replace",property:"foo",
from:"",to:"msg.fred",reg:!1,name:"changeNode",wires:[["helperNode1"]]},{id:"helperNode1",type:"helper",wires:[]}],function(){var b=helper.getNode("changeNode1");helper.getNode("helperNode1").on("input",function(c){try{c.foo.should.equal("bar"),a()}catch(d){a(d)}});b.receive({fred:"bar"})})});it("sets the value of a multi-level message property to another multi-level message property",function(a){helper.load(changeNode,[{id:"changeNode1",type:"change",action:"replace",property:"foo.bar",from:"",to:"msg.fred.red",
reg:!1,name:"changeNode",wires:[["helperNode1"]]},{id:"helperNode1",type:"helper",wires:[]}],function(){var b=helper.getNode("changeNode1");helper.getNode("helperNode1").on("input",function(c){try{c.foo.bar.should.equal("bar"),a()}catch(d){a(d)}});b.receive({fred:{red:"bar"}})})});it("doesn't set the value of a message property when the 'to' message property does not exist",function(a){helper.load(changeNode,[{id:"changeNode1",type:"change",action:"replace",property:"foo.bar",from:"",to:"msg.fred.red",
reg:!1,name:"changeNode",wires:[["helperNode1"]]},{id:"helperNode1",type:"helper",wires:[]}],function(){var b=helper.getNode("changeNode1");helper.getNode("helperNode1").on("input",function(c){try{should.not.exist(c.foo),a()}catch(d){a(d)}});b.receive({})})});it("overrides the value of a message property when the 'to' message property does not exist",function(a){helper.load(changeNode,[{id:"changeNode1",type:"change",action:"replace",property:"payload",from:"",to:"msg.foo",reg:!1,name:"changeNode",
wires:[["helperNode1"]]},{id:"helperNode1",type:"helper",wires:[]}],function(){var b=helper.getNode("changeNode1");helper.getNode("helperNode1").on("input",function(c){try{should.not.exist(c.payload),a()}catch(d){a(d)}});b.receive({payload:"Hello"})})});it("sets the message property to null when the 'to' message property equals null",function(a){helper.load(changeNode,[{id:"changeNode1",type:"change",action:"replace",property:"payload",from:"",to:"msg.foo",reg:!1,name:"changeNode",wires:[["helperNode1"]]},
{id:"helperNode1",type:"helper",wires:[]}],function(){var b=helper.getNode("changeNode1");helper.getNode("helperNode1").on("input",function(c){try{(null===c.payload).should.be.true,a()}catch(d){a(d)}});b.receive({payload:"Hello",foo:null})})});it("does not set other properties using = inside to property",function(a){helper.load(changeNode,[{id:"changeNode1",type:"change",action:"replace",property:"payload",from:"",to:"msg.otherProp=10",reg:!1,name:"changeNode",wires:[["helperNode1"]]},{id:"helperNode1",
type:"helper",wires:[]}],function(){var b=helper.getNode("changeNode1");helper.getNode("helperNode1").on("input",function(c){try{should.not.exist(c.payload),a()}catch(d){a(d)}});b.receive({payload:"changeMe"})})});it("splits dot delimited properties into objects",function(a){helper.load(changeNode,[{id:"changeNode1",type:"change",action:"replace",property:"pay.load",from:"",to:"10",reg:!1,name:"changeNode",wires:[["helperNode1"]]},{id:"helperNode1",type:"helper",wires:[]}],function(){var b=helper.getNode("changeNode1");
helper.getNode("helperNode1").on("input",function(c){try{c.pay.load.should.equal("10"),a()}catch(d){a(d)}});b.receive({pay:{load:"changeMe"}})})})});describe("#change",function(){it("changes the value of the message property",function(a){helper.load(changeNode,[{id:"changeNode1",type:"change",action:"change",property:"payload",from:"Hello",to:"Goodbye",reg:!1,name:"changeNode",wires:[["helperNode1"]]},{id:"helperNode1",type:"helper",wires:[]}],function(){var b=helper.getNode("changeNode1");helper.getNode("helperNode1").on("input",
function(c){try{c.payload.should.equal("Goodbye World!"),a()}catch(d){a(d)}});b.receive({payload:"Hello World!"})})});it("changes the value of a multi-level message property",function(a){helper.load(changeNode,[{id:"changeNode1",type:"change",action:"change",property:"foo.bar",from:"Hello",to:"Goodbye",reg:!1,name:"changeNode",wires:[["helperNode1"]]},{id:"helperNode1",type:"helper",wires:[]}],function(){var b=helper.getNode("changeNode1");helper.getNode("helperNode1").on("input",function(c){try{c.foo.bar.should.equal("Goodbye World!"),
a()}catch(d){a(d)}});b.receive({foo:{bar:"Hello World!"}})})});it("sends unaltered message if the changed message property does not exist",function(a){helper.load(changeNode,[{id:"changeNode1",type:"change",action:"change",property:"foo",from:"Hello",to:"Goodbye",reg:!1,name:"changeNode",wires:[["helperNode1"]]},{id:"helperNode1",type:"helper",wires:[]}],function(){var b=helper.getNode("changeNode1");helper.getNode("helperNode1").on("input",function(c){try{c.payload.should.equal("Hello World!"),a()}catch(d){a(d)}});
b.receive({payload:"Hello World!"})})});it("sends unaltered message if a changed multi-level message property does not exist",function(a){helper.load(changeNode,[{id:"changeNode1",type:"change",action:"change",property:"foo.bar",from:"Hello",to:"Goodbye",reg:!1,name:"changeNode",wires:[["helperNode1"]]},{id:"helperNode1",type:"helper",wires:[]}],function(){var b=helper.getNode("changeNode1");helper.getNode("helperNode1").on("input",function(c){try{c.payload.should.equal("Hello World!"),a()}catch(d){a(d)}});
b.receive({payload:"Hello World!"})})});it("changes the value of the message property based on a regex",function(a){helper.load(changeNode,[{id:"changeNode1",type:"change",action:"change",property:"payload",from:"\\d+",to:"NUMBER",reg:!0,name:"changeNode",wires:[["helperNode1"]]},{id:"helperNode1",type:"helper",wires:[]}],function(){var b=helper.getNode("changeNode1");helper.getNode("helperNode1").on("input",function(c){try{c.payload.should.equal("Replace all numbers NUMBER and NUMBER"),a()}catch(d){a(d)}});
b.receive({payload:"Replace all numbers 12 and 14"})})});it("supports regex groups",function(a){helper.load(changeNode,[{id:"changeNode1",type:"change",action:"change",property:"payload",from:"(Hello)",to:"$1-$1-$1",reg:!0,name:"changeNode",wires:[["helperNode1"]]},{id:"helperNode1",type:"helper",wires:[]}],function(){var b=helper.getNode("changeNode1");helper.getNode("helperNode1").on("input",function(c){try{c.payload.should.equal("Hello-Hello-Hello World"),a()}catch(d){a(d)}});b.receive({payload:"Hello World"})})});
it("Reports invalid regex",function(a){require("sinon");helper.load(changeNode,[{id:"changeNode1",type:"change",action:"change",property:"payload",from:"\\+**+",to:"NUMBER",reg:!0,name:"changeNode",wires:[["helperNode1"]]},{id:"helperNode1",type:"helper",wires:[]}],function(){var b=helper.log().args.filter(function(c){return"change"==c[0].type});b.should.have.length(1);b=b[0][0];b.should.have.property("level",helper.log().ERROR);b.should.have.property("id","changeNode1");a()})})});describe("#delete",
function(){it("deletes the value of the message property",function(a){helper.load(changeNode,[{id:"changeNode1",type:"change",action:"delete",property:"payload",from:"",to:"",reg:!1,name:"changeNode",wires:[["helperNode1"]]},{id:"helperNode1",type:"helper",wires:[]}],function(){var b=helper.getNode("changeNode1");helper.getNode("helperNode1").on("input",function(c){try{c.should.not.have.property("payload"),a()}catch(d){a(d)}});b.receive({payload:"This won't get through!"})})});it("deletes the value of a multi-level message property",
function(a){helper.load(changeNode,[{id:"changeNode1",type:"change",action:"delete",property:"foo.bar",from:"",to:"",reg:!1,name:"changeNode",wires:[["helperNode1"]]},{id:"helperNode1",type:"helper",wires:[]}],function(){var b=helper.getNode("changeNode1");helper.getNode("helperNode1").on("input",function(c){try{c.should.not.have.property("foo.bar"),a()}catch(d){a(d)}});b.receive({payload:"This won't get through!",foo:{bar:"This will be deleted!"}})})});it("sends unaltered message if the deleted message property does not exist",
function(a){helper.load(changeNode,[{id:"changeNode1",type:"change",action:"delete",property:"foo",from:"",to:"",reg:!1,name:"changeNode",wires:[["helperNode1"]]},{id:"helperNode1",type:"helper",wires:[]}],function(){var b=helper.getNode("changeNode1");helper.getNode("helperNode1").on("input",function(c){try{c.should.not.have.property("foo"),c.payload.should.equal("payload"),a()}catch(d){a(d)}});b.receive({payload:"payload"})})});it("sends unaltered message if a deleted multi-level message property does not exist",
function(a){helper.load(changeNode,[{id:"changeNode1",type:"change",action:"delete",property:"foo.bar",from:"",to:"",reg:!1,name:"changeNode",wires:[["helperNode1"]]},{id:"helperNode1",type:"helper",wires:[]}],function(){var b=helper.getNode("changeNode1");helper.getNode("helperNode1").on("input",function(c){try{c.should.not.have.property("foo.bar"),c.payload.should.equal("payload"),a()}catch(d){a(d)}});b.receive({payload:"payload"})})})});describe("- multiple rules",function(){it("handles multiple rules",
function(a){helper.load(changeNode,[{id:"changeNode1",type:"change",wires:[["helperNode1"]],rules:[{t:"set",p:"payload",to:"newValue"},{t:"change",p:"changeProperty",from:"this",to:"that"},{t:"delete",p:"deleteProperty"}]},{id:"helperNode1",type:"helper",wires:[]}],function(){var b=helper.getNode("changeNode1");helper.getNode("helperNode1").on("input",function(c){try{c.payload.should.equal("newValue"),c.changeProperty.should.equal("change that value"),should.not.exist(c.deleteProperty),a()}catch(d){a(d)}});
b.receive({payload:"changeMe",changeProperty:"change this value",deleteProperty:"delete this value"})})});it("applies multiple rules in order",function(a){helper.load(changeNode,[{id:"changeNode1",type:"change",wires:[["helperNode1"]],rules:[{t:"set",p:"payload",to:"a this (hi)"},{t:"change",p:"payload",from:"this",to:"that"},{t:"change",p:"payload",from:"\\(.*\\)",to:"[new]",re:!0}]},{id:"helperNode1",type:"helper",wires:[]}],function(){var b=helper.getNode("changeNode1");helper.getNode("helperNode1").on("input",
function(c){try{c.payload.should.equal("a that [new]"),a()}catch(d){a(d)}});b.receive({payload:"changeMe"})})})})});
