StartTest(function(a){a.diag("All-in-one test");var b=Class({has:{lazyTrack:0,triggerTrack:0,res:{is:"rwc",lazy:function(){this.lazyTrack++;return"lazyinit"},trigger:function(c,d){this.triggerTrack++;1==this.triggerTrack&&(a.ok("lazyinit"==c,"Correct new value"),a.ok(null==d,"Correct old value"));2==this.triggerTrack&&(a.ok("value"==c,"Correct new value"),a.ok("lazyinit"==d,"Correct old value"))}}}});a.ok(b.meta.hasAttribute("res"),"TestClass has 'res' attribute");a.ok(b.meta.hasMethod("res"),"TestClass has 'res' method as well");
a.diag("Checking initial state");b=new b;a.ok("function"==typeof b.res,"Combined accessor was created");a.ok(0==b.triggerTrack,"Trigger wasn't called yet");a.ok(0==b.lazyTrack,"Lazy initializer wasn't called yet");a.diag("Call to initializer");a.ok("lazyinit"==b.res(),"Attribute was correctly and lazily initialized, combined getter works");a.ok(1==b.triggerTrack,"Trigger was called with initialization value");a.ok(1==b.lazyTrack,"Lazy initializer was called");a.diag("Call to setter");b.res("value");
a.ok(2==b.triggerTrack,"Trigger was called");a.ok(1==b.lazyTrack,"Lazy initializer was called only once");a.ok("value"==b.res(),"Combined setter works");a.done()});
