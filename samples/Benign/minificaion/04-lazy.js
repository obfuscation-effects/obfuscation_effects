describe("Lazy dependency injections",function(){it("can initialize in a lazy way",function(){var a=Di(null,!0);a.provide("ntimes",["twice",function(b){return function(c,d){return b(c)*d*.5}}]);a.provide("twice",function(){return function(b){return 2*b}});a.provide("fourtimes",function(){return function(b){return 4*b}});assert.ok(!a.ntimes);assert.ok(!a.twice);a.resolve();assert.ok(a.ntimes);assert.ok(a.twice)});it("throws an error in case of circular dependencies (lazy)",function(){var a=Di("test",
!0);(function(){a.provide("test",function(b,c){return!0});a.provide("unknownDependency",function(){return!0})})();assert.throws(a.resolve,"Circular reference detected: test -> test")});it("can initialize in a lazy way with namespaces",function(){var a=Di(null,!0);a.provide("math.fourtimes",["math.twice",function(b){return function(c){return b(c)+b(c)}}]);a.provide("ntimes",["math.twice",function(b){return function(c,d){return b(c)*d*.5}}]);a.provide("math.twice",function(){return function(b){return 2*
b}});a.resolve();assert.ok(a.ntimes);assert.ok(a.math.twice)});it("can inject functions, provides modules after resolve()ing instantly",function(){var a=Di(null,!0),b=0,c=0,d=0;a.provide("math.fourtimes",["math.twice",function(e){b++;return function(f){return e(f)+e(f)}}]);a.provide("ntimes",["math.twice",function(e){c++;return function(f,g){return e(f)*g*.5}}]);a.provide("math.twice",function(){d++;return function(e){return 2*e}});a.resolve();assert.ok(a.ntimes);assert.ok(a.math.twice);assert.equal(b,
1);assert.equal(c,1);assert.equal(d,1);a.provide("test",function(){return!0});assert.equal(a.test,!0);assert.equal(b,1);assert.equal(c,1);assert.equal(d,1)});it("can inject functions with dependencies and additional arguments (minification-safe syntax)",function(a){var b=Di(null,!0);b.inject(["sprintf",function(c){var d=_.chain(arguments).toArray().slice(1).unshift("%d to %d to %d to %d").value();assert.equal(c.apply(c,d),"1 to 2 to 3 to 4");a()}],1,2,3,4);b.provide("sprintf",util.format,!0);b.resolve()});
it("provide()s instantly after resolving",function(){var a=Di(null,!0);a.provide("math.twice",function(){return function(b){return 2*b}});a.resolve();assert.ok(a.math);assert.ok(!a.math.triple);a.provide("math.triple",function(){return function(b){return 3*b}});assert.ok(a.math.triple)})});
